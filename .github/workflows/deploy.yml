name: build-fetch-deploy

on:
  push:
    branches:
      - gh-pages
  
  workflow_dispatch:

# GITHUB_TOKEN perms
permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Setup Pages
        id: setup_pages
        uses: actions/configure-pages@v5
      
      - name: Restore Cache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Install Dependencies
        run: npm ci

      - name: Static build
        run: npm run build
        env:
          PAGES_BASE_PATH: ${{ steps.setup_pages.outputs.base_path }}

      - name: Upload build artifact for next workflow
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: ./out

  fetch:
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
            node-version: 20
            cache: 'npm'

      - name: Install Deps
        run: npm ci

      - name: Cache browserless image
        id: cache-browserless
        uses: actions/cache@v3
        with:
          path: /tmp/browserless-chromium.tar
          key: ${{ runner.os }}-browserless-chromium-v2.18.0

      - name: Load cached image if available
        run: |
          if [ -f /tmp/browserless-chromium.tar ]; then
            echo "Loading browserless image from cache..."
            docker load -i /tmp/browserless-chromium.tar
          else
            echo "Cache miss. Image will be pulled by the action and saved afterward."
          fi

      - name: Fetch/Web scrape data
        uses: jexniemi/browserless-action-runner@v0.1
        with:
          start_commands: |
            npm run fetch

      - name: Save image to cache (if not already cached)
        if: steps.cache-browserless.outputs.cache-hit != 'true'
        run: |
          echo "Saving browserless image to cache..."
          docker save ghcr.io/browserless/chromium:v2.18.0 -o /tmp/browserless-chromium.tar

      - name: Download pages artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: ./out
      
      - name: Copy data into site artifact
        run: cp -r ./public ./out/public

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out


  deploy:
    runs-on: ubuntu-latest
    needs: fetch

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to Github Pages
        id: deployment
        uses: actions/deploy-pages@v4
