name: build-fetch-deploy

on:
  push:
    branches:
      - gh-pages
  workflow_dispatch:
  schedule:
    - cron: '0 16 * * *' # every day at 9AM PST (4PM UTC)

# GITHUB_TOKEN perms
permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

env:
  ARTIFACT_NAME: build-artifact

jobs:
  check-artifact:
    runs-on: ubuntu-latest

    outputs:
      artifact_exists: ${{ steps.check.outputs.artifact_exists }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Check for build artifact
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARTIFACT_NAME: ${{ env.ARTIFACT_NAME}}
        run: |
          echo "Checking if artifact exists..."
          gh run download --name "$ARTIFACT_NAME" || {
            echo "artifact_exists=false" >> $GITHUB_OUTPUT
            exit 0
          }
          echo "artifact_exists=true" >> $GITHUB_OUTPUT

  build:
    if: needs.check-artifact.outputs.artifact_exists == 'false'
    needs: check-artifact
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Setup Pages
        id: setup_pages
        uses: actions/configure-pages@v5
        with:
          # Auto inject baseBath in next.config.js so localhost
          static_site_generator: next
      
      - name: Restore Cache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Install Dependencies
        run: npm ci

      - name: Static build
        run: npm run build
        env:
          PAGES_BASE_PATH: ${{ steps.setup_pages.outputs.base_path }}

      - name: Upload build artifact for next workflow
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./out

  fetch:
    if: ${{ !cancelled() && (needs.check-artifact.outputs.artifact_exists == 'true' || needs.build.result == 'success') }}
    runs-on: ubuntu-latest
    needs: [check-artifact, build]

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
            node-version: 20
            cache: 'npm'

      - name: Install Deps
        run: npm ci
      
      - name: Fetch/Web scrape data
        env:
          BROWSERLESS_API_KEY: ${{ secrets.BROWSERLESS_API_KEY }}
        run: npm run fetch

      - name: Download pages artifact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARTIFACT_NAME: ${{ env.ARTIFACT_NAME}}
        run: |
          echo "Downloading existing build artifact"
          gh run download --name "$ARTIFACT_NAME" --dir out
      
      - name: Copy data into site artifact
        run: cp ./public/* ./out

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  deploy:
    runs-on: ubuntu-latest
    needs: fetch

    environment:
      name: github-pages

    steps:
      - name: Deploy to Github Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Echo page URL
        run: echo "Deployed to ${{ steps.deployment.outputs.page_url }}"